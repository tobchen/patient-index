/*
 * This file is generated by jOOQ.
 */
package de.tobchen.health.patientindex.feed.jooq.public_.tables.records;


import de.tobchen.health.patientindex.feed.jooq.public_.tables.IdValue;

import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class IdValueRecord extends UpdatableRecordImpl<IdValueRecord> implements Record2<String, OffsetDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.id_value.id</code>.
     */
    public void setId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.id_value.id</code>.
     */
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.id_value.value_ts</code>.
     */
    public void setValueTs(OffsetDateTime value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.id_value.value_ts</code>.
     */
    public OffsetDateTime getValueTs() {
        return (OffsetDateTime) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, OffsetDateTime> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, OffsetDateTime> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return IdValue.ID_VALUE.ID;
    }

    @Override
    public Field<OffsetDateTime> field2() {
        return IdValue.ID_VALUE.VALUE_TS;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public OffsetDateTime component2() {
        return getValueTs();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public OffsetDateTime value2() {
        return getValueTs();
    }

    @Override
    public IdValueRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public IdValueRecord value2(OffsetDateTime value) {
        setValueTs(value);
        return this;
    }

    @Override
    public IdValueRecord values(String value1, OffsetDateTime value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached IdValueRecord
     */
    public IdValueRecord() {
        super(IdValue.ID_VALUE);
    }

    /**
     * Create a detached, initialised IdValueRecord
     */
    public IdValueRecord(String id, OffsetDateTime valueTs) {
        super(IdValue.ID_VALUE);

        setId(id);
        setValueTs(valueTs);
        resetChangedOnNotNull();
    }
}
