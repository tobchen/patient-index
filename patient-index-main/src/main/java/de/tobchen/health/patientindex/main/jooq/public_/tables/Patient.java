/*
 * This file is generated by jOOQ.
 */
package de.tobchen.health.patientindex.main.jooq.public_.tables;


import de.tobchen.health.patientindex.main.jooq.public_.Keys;
import de.tobchen.health.patientindex.main.jooq.public_.Public;
import de.tobchen.health.patientindex.main.jooq.public_.tables.records.PatientRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Patient extends TableImpl<PatientRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.patient</code>
     */
    public static final Patient PATIENT = new Patient();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PatientRecord> getRecordType() {
        return PatientRecord.class;
    }

    /**
     * The column <code>public.patient.id</code>.
     */
    public final TableField<PatientRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.patient.last_updated</code>.
     */
    public final TableField<PatientRecord, OffsetDateTime> LAST_UPDATED = createField(DSL.name("last_updated"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.patient.identifiers</code>.
     */
    public final TableField<PatientRecord, JSONB> IDENTIFIERS = createField(DSL.name("identifiers"), SQLDataType.JSONB.nullable(false), this, "");

    /**
     * The column <code>public.patient.merged_into</code>.
     */
    public final TableField<PatientRecord, String> MERGED_INTO = createField(DSL.name("merged_into"), SQLDataType.VARCHAR(64), this, "");

    private Patient(Name alias, Table<PatientRecord> aliased) {
        this(alias, aliased, null);
    }

    private Patient(Name alias, Table<PatientRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.patient</code> table reference
     */
    public Patient(String alias) {
        this(DSL.name(alias), PATIENT);
    }

    /**
     * Create an aliased <code>public.patient</code> table reference
     */
    public Patient(Name alias) {
        this(alias, PATIENT);
    }

    /**
     * Create a <code>public.patient</code> table reference
     */
    public Patient() {
        this(DSL.name("patient"), null);
    }

    public <O extends Record> Patient(Table<O> child, ForeignKey<O, PatientRecord> key) {
        super(child, key, PATIENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<PatientRecord> getPrimaryKey() {
        return Keys.PATIENT_PKEY;
    }

    @Override
    public List<ForeignKey<PatientRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PATIENT__PATIENT_MERGED_INTO_FKEY);
    }

    private transient Patient _patient;

    /**
     * Get the implicit join path to the <code>public.patient</code> table.
     */
    public Patient patient() {
        if (_patient == null)
            _patient = new Patient(this, Keys.PATIENT__PATIENT_MERGED_INTO_FKEY);

        return _patient;
    }

    @Override
    public Patient as(String alias) {
        return new Patient(DSL.name(alias), this);
    }

    @Override
    public Patient as(Name alias) {
        return new Patient(alias, this);
    }

    @Override
    public Patient as(Table<?> alias) {
        return new Patient(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Patient rename(String name) {
        return new Patient(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Patient rename(Name name) {
        return new Patient(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Patient rename(Table<?> name) {
        return new Patient(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, OffsetDateTime, JSONB, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super String, ? super OffsetDateTime, ? super JSONB, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super String, ? super OffsetDateTime, ? super JSONB, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
