/*
 * This file is generated by jOOQ.
 */
package de.tobchen.health.patientindex.main.jooq.public_.tables;


import de.tobchen.health.patientindex.main.jooq.public_.Keys;
import de.tobchen.health.patientindex.main.jooq.public_.Public;
import de.tobchen.health.patientindex.main.jooq.public_.tables.records.PatientsRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Patients extends TableImpl<PatientsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.patients</code>
     */
    public static final Patients PATIENTS = new Patients();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PatientsRecord> getRecordType() {
        return PatientsRecord.class;
    }

    /**
     * The column <code>public.patients.id</code>.
     */
    public final TableField<PatientsRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.patients.last_updated</code>.
     */
    public final TableField<PatientsRecord, OffsetDateTime> LAST_UPDATED = createField(DSL.name("last_updated"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.patients.identifiers</code>.
     */
    public final TableField<PatientsRecord, JSONB> IDENTIFIERS = createField(DSL.name("identifiers"), SQLDataType.JSONB.nullable(false), this, "");

    /**
     * The column <code>public.patients.merged_into</code>.
     */
    public final TableField<PatientsRecord, String> MERGED_INTO = createField(DSL.name("merged_into"), SQLDataType.VARCHAR(64), this, "");

    private Patients(Name alias, Table<PatientsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Patients(Name alias, Table<PatientsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.patients</code> table reference
     */
    public Patients(String alias) {
        this(DSL.name(alias), PATIENTS);
    }

    /**
     * Create an aliased <code>public.patients</code> table reference
     */
    public Patients(Name alias) {
        this(alias, PATIENTS);
    }

    /**
     * Create a <code>public.patients</code> table reference
     */
    public Patients() {
        this(DSL.name("patients"), null);
    }

    public <O extends Record> Patients(Table<O> child, ForeignKey<O, PatientsRecord> key) {
        super(child, key, PATIENTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<PatientsRecord> getPrimaryKey() {
        return Keys.PATIENTS_PKEY;
    }

    @Override
    public List<ForeignKey<PatientsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PATIENTS__PATIENTS_MERGED_INTO_FKEY);
    }

    private transient Patients _patients;

    /**
     * Get the implicit join path to the <code>public.patients</code> table.
     */
    public Patients patients() {
        if (_patients == null)
            _patients = new Patients(this, Keys.PATIENTS__PATIENTS_MERGED_INTO_FKEY);

        return _patients;
    }

    @Override
    public Patients as(String alias) {
        return new Patients(DSL.name(alias), this);
    }

    @Override
    public Patients as(Name alias) {
        return new Patients(alias, this);
    }

    @Override
    public Patients as(Table<?> alias) {
        return new Patients(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Patients rename(String name) {
        return new Patients(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Patients rename(Name name) {
        return new Patients(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Patients rename(Table<?> name) {
        return new Patients(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, OffsetDateTime, JSONB, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super String, ? super OffsetDateTime, ? super JSONB, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super String, ? super OffsetDateTime, ? super JSONB, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
